''' **BIBLIOTECAS PADR√ÉO**  '''
# Para manipular e interagir com o sistema de arquivos.
import os 

# Para trabalhar com express√µes regulares.
import re  

# Para pausar a execu√ß√£o do programa.
import time  

# Para normalizar strings, removendo acentos e caracteres especiais.
import unicodedata  

from datetime import datetime

''' **BIBLIOTECAS DE TERCEIROS**  '''
# Importa a biblioteca `requests`, que √© usada para fazer requisi√ß√µes HTTP em Python.
import requests  

# Importa o `webdriver` do SFelenium, usado para controlar o navegador de forma automatizada.
from selenium import webdriver  

# Importa a classe `Service` do Selenium para configurar o caminho do driver do Chrome.
from selenium.webdriver.chrome.service import Service  

# Importa a classe `By`, usada para localizar elementos na p√°gina por diferentes m√©todos (por exemplo, ID, CLASS_NAME).
from selenium.webdriver.common.by import By  

# Importa `WebDriverWait` do Selenium para criar esperas expl√≠citas, ou seja, aguardar a condi√ß√£o de um elemento ser atendida.
from selenium.webdriver.support.ui import WebDriverWait  

# Importa `expected_conditions` do Selenium, que fornece condi√ß√µes como visibilidade de elementos, necess√°rias para as esperas.
from selenium.webdriver.support import expected_conditions as EC  

# Importa `BeautifulSoup` da biblioteca `bs4` para analisar e extrair dados de documentos HTML.
from bs4 import BeautifulSoup  

# Importa `Fore`, `Style` e `init` da biblioteca `colorama` para adicionar cores e estilo ao texto exibido no terminal.
from colorama import Fore, Style, init  

# Importa a exce√ß√£o `TimeoutException` do Selenium, que √© levantada quando o tempo de espera de uma a√ß√£o expira.
from selenium.common.exceptions import TimeoutException



''' **IMPORTA√á√ïES DO DJANGO**  '''
# Importa o m√≥dulo `django` para configurar o ambiente Django, √∫til quando o ambiente n√£o est√° rodando via servidor padr√£o.
import django  

# Importa o objeto `settings` do Django, permitindo acessar as configura√ß√µes do projeto, como `MEDIA_URL`, onde ficam os arquivos est√°ticos e de m√≠dia.
from django.conf import settings  

# Importa a fun√ß√£o `mark_safe` da biblioteca `django.utils.safestring`, que √© usada para marcar strings como seguras, permitindo que elas sejam renderizadas como HTML em templates.
from django.utils.safestring import mark_safe  

# Importa o m√≥dulo `timezone` do Django, utilizado para manipular datas e fusos hor√°rios no framework.
from django.utils import timezone  





''' **IMPORTA√á√ïES DE M√ìDULOS INTERNOS**  '''
# Importa os modelos `Noticias`, `Categoria` e `CategoriaNoticias` do aplicativo `trendfeeds`, usados para manipular dados no banco de dados.
from trendfeeds.models import Noticias, Categoria, CategoriaNoticias  




''' **CONFIGURA√á√ÉO DO AMBIENTE DJANGO E INICIALIZA√á√ÉO DO SELENIUM**  '''
# Define a vari√°vel de ambiente `DJANGO_SETTINGS_MODULE` para informar ao Django qual arquivo de configura√ß√µes usar.
# 'web_news.settings' configura o Django para que ele utilize as configura√ß√µes especificadas no arquivo 'web_news.settings'.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'web_news.settings')

# Inicializa o Django, fazendo com que todas as funcionalidades e configura√ß√µes do Django fiquem dispon√≠veis para o script atual.
django.setup()

# Inicializa o `colorama`, configurando o terminal para resetar as cores automaticamente ap√≥s cada linha de c√≥digo.
init(autoreset=True)

# Define o driver do Selenium como `None`, indicando que ele ainda n√£o foi inicializado e ser√° configurado posteriormente.
driver = None




def coletar_noticias():

    ''' **SE√á√ÉO PARA AS CONFIGURA√á√ïES INICIAS DA CAPTURA DE NOT√çCIAS ** '''

    # Cria uma inst√¢ncia de `Service` para controlar o navegador Chrome com o Selenium.
    # O par√¢metro em branco indicaria que o caminho do driver do Chrome precisa ser fornecido.
    service = Service('')

    # Configura as op√ß√µes do navegador Chrome, como permitir a execu√ß√£o em segundo plano ou desabilitar notifica√ß√µes.
    options = webdriver.ChromeOptions()

    # Inicializa o driver do Chrome com as op√ß√µes e o servi√ßo especificados, permitindo que o Selenium controle o navegador.
    driver = webdriver.Chrome(service=service, options=options)

    # Define a URL do site principal de not√≠cias, que ser√° acessada para coletar informa√ß√µes.
    url_principal = 'https://ge.globo.com/'

    # Inicializa um conjunto para armazenar as URLs de not√≠cias j√° processadas, evitando que a mesma not√≠cia seja coletada mais de uma vez.
    processed_urls = set()

    # Define a posi√ß√£o inicial de rolagem da p√°gina como 0, e prepara o incremento da rolagem em 550 pixels.
    # Isso permite simular a rolagem da p√°gina para carregar mais conte√∫do.
    current_scroll_position = 0

    # Define o valor de incremento da rolagem, ou seja, quantos pixels o navegador vai rolar a cada etapa.
    scroll_increment = 550

    # Inicializa o contador para rastrear o n√∫mero de not√≠cias coletadas e garantir que o processo est√° avan√ßando conforme esperado.
    contador = 0




    ''' **SE√á√ÉO QUE INICIA A ENTRADA NO SITE, PARA A CAPTURA OU N√ÉO DA NOT√çCIA** '''

    try:
        # Acessa a URL principal com o Selenium.
        driver.get(url_principal)

        # Inicia um loop para coletar not√≠cias. A itera√ß√£o ser√° feita 30 vezes.
        for i in range(30):

            # Marca a cria√ß√£o de not√≠cia como 'n√£o', para registrar se uma not√≠cia foi processada com sucesso.
            criado = 'nao'

            # Pausa de 2 segundos para garantir que a p√°gina carregue antes de interagir.
            time.sleep(2)

            # Atualiza a posi√ß√£o de rolagem da p√°gina e rola a janela para carregar mais conte√∫do.
            current_scroll_position += scroll_increment
            driver.execute_script(f"window.scrollTo(0, {current_scroll_position});")

            # Aguarda mais 2 segundos ap√≥s a rolagem.
            time.sleep(2)

            # Aguarda at√© que os elementos de not√≠cias estejam vis√≠veis na p√°gina.
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CLASS_NAME, 'feed-post-body'))
            )

            # Encontra todos os elementos que cont√™m o conte√∫do das not√≠cias.
            noticias = driver.find_elements(By.CLASS_NAME, 'feed-post-body')


            try:

                # Seleciona a not√≠cia atual para processamento.
                noticia = noticias[i]
            except IndexError:

                # Exibe mensagem de erro caso o √≠ndice esteja fora do alcance.
                print(Fore.RED + f"‚ö†Ô∏è Erro: √çndice {i} fora do alcance para a lista de not√≠cias. Total dispon√≠vel: {len(noticias)}")
                continue




            ''' **SE√á√ÉO PARA VERIFICAR SE HAVER√Å OU N√ÉO A CAPTURA DA NOT√çCIA** '''

            try:

                # Verifica se a not√≠cia √© marcada como "Tempo Real" e ignora se for o caso.
                tempo_real = noticia.find_element(By.CLASS_NAME, 'bstn-aovivo-label')

                print(Fore.YELLOW + f"‚è© Not√≠cia {i+1} marcada como Tempo Real, pulando... ", '\n')
                continue
            except:
                pass

            try:
                # Captura o link e o t√≠tulo da not√≠cia.
                link_noticia = noticia.find_element(By.CLASS_NAME, 'feed-post-link').get_attribute('href')
                titulo_noticia = noticia.find_element(By.CSS_SELECTOR, 'a.feed-post-link p').text.strip()
            except:

                # Exibe mensagem de erro ao capturar o link ou t√≠tulo da not√≠cia.
                print(Fore.RED + f"‚ùå Erro ao capturar link ou t√≠tulo da not√≠cia {i+1}, pulando...")
                continue

            # Ignora links que contenham "/video", "/jogo", "/playlist" e URLs j√° processadas.
            if any(substring in link_noticia for substring in ["/video", "/jogo", "/playlist"]) or link_noticia in processed_urls:
                print(Fore.CYAN + f"‚è© Not√≠cia {i+1} cont√©m um link que ser√° ignorado.", '\n')
                continue

            # Adiciona o link ao conjunto de URLs processadas.
            processed_urls.add(link_noticia)

            # Exibe o t√≠tulo e link da not√≠cia capturada no console.
            print(Fore.GREEN+ "‚úÖ " + Style.RESET_ALL + f"Not√≠cia{i+1}: " + Fore.GREEN + f" {titulo_noticia}")
            print(Fore.BLUE + "üîó " + Style.RESET_ALL + "Link: " + Fore.BLUE + f"{link_noticia}\n")

            # Acessa a URL da not√≠cia para capturar o conte√∫do completo.
            driver.get(link_noticia)
            time.sleep(2)

            # Verifique se a URL atual corresponde √† not√≠cia
            if driver.current_url != link_noticia:
                print(Fore.RED + f"‚ùå URL inconsistente ao capturar imagens para {titulo_truncado}.")
                continue


            try:
                # Aguarda at√© que o elemento de classifica√ß√£o esteja vis√≠vel na p√°gina, indicando que √© uma p√°gina de classifica√ß√£o.
                de_a_nota = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, 'voce-da-nota__container'))
                )

                print(Fore.RED + f"‚ùå Erro na not√≠cia {i+1}, √© uma classifica√ß√£o...")
                continue  
            except TimeoutException:
                # Se o elemento n√£o for encontrado, o c√≥digo continuar√° normalmente.
                pass  

            try:

                # Aguarda at√© que o t√≠tulo da not√≠cia esteja vis√≠vel.
                title_element = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, 'content-head__title'))
                )

                # Captura o t√≠tulo da not√≠cia exibido na p√°gina.
                title_text = title_element.text
            except:

                # Exibe mensagem de erro ao capturar o t√≠tulo da not√≠cia e retorna √† p√°gina principal.
                print(Fore.RED + f"‚ùå Erro ao capturar o t√≠tulo da not√≠cia {i+1}, retornando para a p√°gina principal...")

                driver.get(url_principal)
                time.sleep(2)
                continue

            try:

                # Aguarda at√© que o conte√∫do principal da not√≠cia esteja vis√≠vel.
                content_element = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, 'mc-body'))
                )

                # Captura o conte√∫do principal da not√≠cia.
                content_text = content_element.text

                # Lista de classes de elementos a serem removidos do conte√∫do.
                classes_para_remover = [
                    'content-publication-data__from', 
                    'next-article__wrapper-header-title',
                    'js-next-article-desktop-link', 
                    'glbComentarios-initCommentButton', 
                    'shadow-video-flow-video-infocategory',
                    'visually-hidden', 
                    'content-votetitle', 
                    'content-vote__row', 
                    'shadow-video-flow-video-info__title',
                    'ellipsis-overflowing-child', 
                    'shadow-video-flow-video-infoissued', 
                    'entitieslist-itemLink',
                    'content-publication-data__updated',
                    'show-multicontent-playlist__label',
                    'content-publication-data__text',
                    'content-head__title',
                    'content-unordered-list',
                    'show-multicontent-playlist',
                    'shadow-video-flow',
                    'mc-bottom',
                    'content-text__container',
                    'next-article',
                    'mais-lidas-lista',
                    'active-extra-styles',
                    'content-intertitle',
                    'podcast-container',
                    'content-video',
                    'content-text',
                    'show-multicontent-playlist__label',
                    'next-article__wrapper-header-title',
                    'next-article-desktop-link',
                    'entities__list-itemLink',
                    'nextElement',
                    'next-article-sticky',
                    



                ]

                # Remove o texto de elementos indesejados do conte√∫do.
                for class_name in classes_para_remover:
                    try:
                        elemento_para_remover = content_element.find_element(By.CLASS_NAME, class_name)
                        content_text = content_text.replace(elemento_para_remover.text, "")
                    except:
                        pass

                # Exibe um resumo da not√≠cia extra√≠do do conte√∫do principal.
                preview_content = pegar_resumo(content_text)

                print(Fore.GREEN + f"üìã Preview da not√≠cia: {preview_content}", '\n')
            except:

                # Exibe mensagem de erro ao capturar o conte√∫do da not√≠cia e retorna √† p√°gina principal.
                print(Fore.RED + f"‚ùå Erro ao capturar o conte√∫do da not√≠cia {i+1}, retornando para a p√°gina principal...")

                driver.get(url_principal)
                time.sleep(2)
                continue



            ''' **SE√á√ÉO PARA FORMATA√á√ÉO DO T√çTULO DA NOT√çCIA** '''

            # Normaliza o t√≠tulo para remover acentua√ß√£o e caracteres especiais.
            titulo_normalizado = unicodedata.normalize('NFD', title_text)

            # Remove acentos do t√≠tulo.
            titulo_sem_acento = ''.join([c for c in titulo_normalizado if unicodedata.category(c) != 'Mn'])

            # Remove pontua√ß√£o do t√≠tulo.
            titulo_sem_pontuacao = re.sub(r'[{}%@#$%^&*()!<>:"/\\|+_=,.?;^~`-]', '', titulo_sem_acento)

            # Formata o t√≠tulo para uso como identificador, substituindo espa√ßos por underline.
            titulo_formatado_semespaco = re.sub(r'[\\/*?:"<>|]', "", titulo_sem_pontuacao).replace(" ", "_")

            # Substitui caracteres espec√≠ficos para manter compatibilidade com sistemas de arquivos.
            titulo_formatado_semespaco = titulo_formatado_semespaco.replace("¬∫", "o")
            titulo_formatado_semespaco = titulo_formatado_semespaco.replace("¬™", "a")

            # Trunca o t√≠tulo para 200 caracteres em min√∫sculas.
            titulo_truncado = titulo_formatado_semespaco[:200].lower()




            ''' **SE√á√ÉO PARA MANIPULA√á√ÉO DE ARQUIVOS DE IMAGENS**  '''

            # Diret√≥rio absoluto para salvar as imagens da not√≠cia.
            diretorio_imagens = settings.MEDIA_ROOT

            # Cria o diret√≥rio de imagens se ele ainda n√£o existir.
            os.makedirs(diretorio_imagens, exist_ok=True)

            # Formata o t√≠tulo da not√≠cia para uso futuro.
            titulo_formatado = re.sub(r'[\\/*?:"<>|]', "", title_text)

        


            times = { 
                     
            # Times S√©rie A 
            "atletico_mg": ["atleticomg", "galo"], "athletico_pr": ["atleticopr", "athletico", "furacao"], "bahia": ["bahia", "esquadrao", "esquadrao de aco"], "botafogo": ["botafogo", "fogao"], "bragantino": ["bragantino", "red bull bragantino", "massa bruta"], "corinthians": ["corinthians", "timao"], "cruzeiro": ["cruzeiro", "raposa"], "cuiaba": ["cuiaba", "dourado"], "flamengo": ["flamengo", "fla", "urubu"], "fluminense": ["fluminense", "flu", "tricolor das laranjeiras"], "fortaleza": ["fortaleza", "leao do pici"], "gremio": ["gremio", "tricolor gaucho", "imortal"], "internacional": ["inter", "colorado"], "palmeiras": ["palmeiras", "verdao"], "sao_paulo": ["sao_paulo", "spfc", "tricolor paulista", "sao paulo"], "vasco": ["vasco", "vascao", "gigante da colina"], "juventude": ["juventude", "juve"], "criciuma": ["criciuma", "tigre"], "vitoria": ["vitoria", "leao da barra"], "atletico_go": ["atleticogo", "dragao"], 
            
            # Sele√ß√£o Brasileira 
            "selecao": ["selecao", "selecao brasileira", "canario", "canarinho"], 
            
            # Times S√©rie B
            "ceara": ["ceara", "vozao"], "crb": ["crb"], "amazonas": ["amazonas", "onca pintada"], "operario_pr": ["operariopr", "operario", "fantasma"], "brusque": ["brusque", "maior do vale", "bruscao", "marreco"], "paysandu": ["paysandu", "papao"], "chapecoense": ["chapecoense", "chape"], "ituano": ["ituano", "galo de itu"], "mirassol": ["mirassol", "leao"], "novorizontino": ["novorizontino", "tigre do vale"], "ponte_preta": ["ponte preta", "macaca"], "sport": ["sport", "leao da ilha"], "vila_nova": ["vila nova", "tigre"], "avai": ["avai", "leao da ilha"], "botafogo_sp": ["botafogosp", "pantera"], "guarani": ["guarani", "bugre"], "goias": ["goias", "esmeraldino"], "santos": ["santos", "peixe"], "coritiba": ["coritiba", "coxa"], "america_mg": ["americamg", "coelho"], 
            }




            ''' **SE√á√ÉO DE CRIA√á√ÉO E ATUALIZA√á√ÉO DA NOT√çCIA NO BANCO DE DADOS** '''

            try:            

                 #pega a data atual para salvar no banco
                # Obt√©m a data e hora atuais
                data_publicacao = timezone.now()

                # Extrai apenas a hora e os minutos
                hora_publicacao = data_publicacao.strftime("%H:%M")

                #o autor permanece desconhecido caso nao seja encontrado na noticia
                autor_text = "Desconhecido"

                try:
                    autor_element = driver.find_element(By.CLASS_NAME, 'content-publication-data__from')
                    autor_text = autor_element.text
                except:
                    pass

                try:
                    noticia_modelo, created = Noticias.objects.update_or_create(
                        titulo=titulo_truncado,
                        defaults={
                            'titulo_bonito': title_text,
                            'data_publicacao': data_publicacao,
                            'hora_publicacao':  hora_publicacao,
                            'descricao': preview_content,
                            'autor': autor_text,
                            'link': link_noticia
                        }
                    )
                    if created:
                        print(Fore.GREEN + f"‚úÖ Not√≠cia '{titulo_truncado}' criada com sucesso no banco de dados.")
                    else:
                        print(Fore.YELLOW + f"‚ö†Ô∏è Not√≠cia '{titulo_truncado}' j√° existente. Atualizada no banco de dados.")
                except Exception as e:
                    print(Fore.RED + f"‚ùå Erro ao salvar a not√≠cia '{titulo_truncado}' no banco de dados: {e}")
                    continue


                # Procura por categorias na lista de times com base no t√≠tulo da not√≠cia
                categorias_encontradas = []

                #o time_id permanece none se ele nao conseguir associar
                time_id = None

                # Quebra o t√≠tulo em palavras para preservar a ordem
                palavras_titulo = titulo_sem_pontuacao.lower().split()




                ''' **SE√á√ÉO DE VERIFICA√á√ÉO DA CATEGORIA DA NOT√çCIA** '''

                # Itera sobre as palavras do t√≠tulo, priorizando a ordem natural do texto
                for palavra in palavras_titulo:
                    for clube, dados in times.items():

                        # Verifica se a palavra √© um apelido do time
                        if palavra in dados[:-1]:  

                            # Se nenhuma categoria foi registrada
                            if not categorias_encontradas:  
                                categorias_encontradas.append(clube)

                                # Atribui o ID do time correspondente
                                time_id = dados[-1]

                                # Para de buscar ap√≥s encontrar o primeiro time
                                break  

                    # Se j√° encontrou uma categoria, para de iterar
                    if categorias_encontradas:  
                        break
                print(Fore.BLUE + f"üîç Categoria escolhida: {categorias_encontradas[0] if categorias_encontradas else 'Nenhuma'}", '\n')


                # Verifica se nenhuma categoria foi encontrada no t√≠tulo da not√≠cia.
                if len(categorias_encontradas) == 0:  

                    # Exibe uma mensagem de aviso no console informando que nenhuma categoria foi associada.
                    print(Fore.YELLOW + "‚ö†Ô∏è N√£o foi poss√≠vel relacionar nenhuma categoria!", '\n') 

                    # Busca ou cria uma categoria padr√£o chamada 'outros' no banco de dados.
                    categoria, _ = Categoria.objects.get_or_create(nome_categoria='outros')  

                    # Cria uma associa√ß√£o entre a not√≠cia e a categoria 'outros'.
                    CategoriaNoticias.objects.get_or_create(noticia=noticia_modelo, categoria=categoria)  

                # Se ao menos uma categoria foi encontrada:
                else:  

                    # Verifica novamente se h√° categorias encontradas (redundante neste caso, mas usado por seguran√ßa).
                    if categorias_encontradas:  
                        
                        # Itera sobre todas as categorias encontradas no t√≠tulo da not√≠cia.
                        for nome_categoria in categorias_encontradas:  
                            
                            # Busca ou cria cada categoria encontrada no banco de dados.
                            categoria, _ = Categoria.objects.get_or_create(nome_categoria=nome_categoria)  

                            # Associa a not√≠cia √† categoria encontrada.
                            CategoriaNoticias.objects.get_or_create(noticia=noticia_modelo, categoria=categoria)  

                    print(Fore.GREEN + f"Not√≠cia '{titulo_truncado}' associada com a categoria '{categoria.nome_categoria}'.", '\n')  

            # Exibe uma mensagem no console informando que a not√≠cia foi associada com sucesso a uma ou mais categorias.
            except Exception as e:
                print(Fore.YELLOW + "‚ö†Ô∏è N√£o foi poss√≠vel relacionar nenhuma categoria!", '\n')
                



            # Obtenha o ID gerado
            novo_id_noticia = noticia_modelo.id  
               



            ''' **SE√á√ÉO PARA PEGAR AS IMAGENS DA NOT√çCIA** '''

            try:
                # Rolando a p√°gina para garantir que todo o conte√∫do seja carregado
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(30)  # Aguarda brevemente para carregar elementos din√¢micos

                # Localiza todos os elementos de imagem na p√°gina com o seletor CSS "amp-img".
                imagens_elementos = WebDriverWait(driver, 60).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, "figure.content-media-figure amp-img")))

                # Inicializa uma lista vazia para armazenar os URLs das imagens.
                imagem_urls = []

                # Itera sobre cada elemento de imagem encontrado, com um √≠ndice `j` para diferenciar as imagens.
                for j, imagem_elemento in enumerate(imagens_elementos):
                    try:
                        url_imagem = imagem_elemento.get_attribute("src")
                        if not url_imagem or not url_imagem.startswith("http"):
                            print(Fore.RED + f"‚ö†Ô∏è URL inv√°lido encontrado: {url_imagem}")
                            continue


                        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
                        # Define o caminho e nome do arquivo para salvar a imagem localmente, com base no ID da not√≠cia e no √≠ndice.
                        nome_arquivo_imagem = os.path.join(f'{diretorio_imagens}/noticias', f"n_{novo_id_noticia}_{j}.jpg")

                        # Verifica se o arquivo j√° existe.
                        if os.path.exists(nome_arquivo_imagem):
                            print(Fore.YELLOW + f"üîÑ Arquivo {nome_arquivo_imagem} j√° existe. Ser√° sobrescrito.")
                                
                        # Faz uma requisi√ß√£o HTTP para o URL da imagem e ativa o modo "stream" para download por partes.
                        resposta_imagem = requests.get(url_imagem, stream=True)

                        # Verifica se a requisi√ß√£o foi bem-sucedida. Lan√ßa uma exce√ß√£o caso haja algum erro (e.g., 404 ou 500).
                        resposta_imagem.raise_for_status()

                        # Abre um arquivo no modo "write binary" para salvar os dados da imagem.
                        with open(nome_arquivo_imagem, 'wb') as file:

                            # Faz o download da imagem em blocos de 1024 bytes para economizar mem√≥ria.
                            for chunk in resposta_imagem.iter_content(1024):

                                # Escreve cada bloco baixado no arquivo.
                                file.write(chunk)

                        # Adiciona o caminho da imagem salva √† lista `imagem_urls`.
                        imagem_urls.append(nome_arquivo_imagem)

                        # Exibe uma mensagem indicando que a imagem foi salva com sucesso.
                        print(Fore.GREEN + f"‚úÖ Imagem {j} salva como {nome_arquivo_imagem}")

                    except Exception as e:

                        # Exibe uma mensagem de erro caso qualquer exce√ß√£o seja levantada durante o processo.
                        print(Fore.RED + f"Erro ao baixar as imagens: {e}")

            except Exception as e:

                # Exibe uma mensagem de erro geral caso qualquer exce√ß√£o seja levantada.
                print(Fore.RED + f"Erro ao baixar as imagens: {e}")
                                



            ''' **SE√á√ÉO QUE CRIA A PRIMEIRA BASE HTML DA NOT√çCIA** '''

            nome_arquivo = f"{titulo_truncado}.html"

            # Define o nome do arquivo e o caminho para salvar o HTML da not√≠cia.
            caminho_arquivo = os.path.join('trendfeeds/templates/html/noticias', nome_arquivo)

            # Cria o conte√∫do HTML para a not√≠cia.
            html_content = f"""
            <html>
                <article class="noticia-detalhada">
                    <h1 class="noticia-titulo mt-4">{title_text}</h1>
                    <p class="noticia-conteudo">{content_text}</p>
                </article>
            </html>
            """
            
            # Salva o HTML da not√≠cia no diret√≥rio especificado.
            with open(caminho_arquivo, 'w', encoding='utf-8') as file:
                file.write(html_content)

            # Marca a not√≠cia como criada.
            print(Fore.GREEN + f"‚úÖArquivo HTML criado com sucesso: {caminho_arquivo}", '\n')
            criado = 'sim'

            second_title_formatado = re.sub(r'[\\/*?:"<>|]', "", title_text)
            main_content_formatado = formatar_texto(titulo_formatado_semespaco, imagens_elementos, novo_id_noticia)

            # Atualiza o caminho do arquivo HTML da not√≠cia.
            caminho_arquivo = os.path.join('trendfeeds/templates/html/noticias', nome_arquivo)
            categoria_nome = categorias_encontradas[0] if categorias_encontradas else "Outros"

            # Local para salvar as p√°ginas de categoria
            categoria_template_dir = 'trendfeeds/templates/html/categorias'

            # Cria o diret√≥rio de categorias se ele ainda n√£o existir
            os.makedirs(categoria_template_dir, exist_ok=True)
            




            ''' **SE√á√ÉO QUE CRIA A P√ÅGINA INDEX DE CADA CATEGORIA** '''

            if categorias_encontradas:
                for nome_categoria in categorias_encontradas:
                    try:
                        # Cria ou obt√©m a categoria no banco de dados.
                        categoria, _ = Categoria.objects.get_or_create(nome_categoria=nome_categoria)

                        nome_amigavel = categoria.nome

                        # Associa a not√≠cia √† categoria.
                        CategoriaNoticias.objects.get_or_create(noticia=noticia_modelo, categoria=categoria)

                        # Define o nome do arquivo HTML para a p√°gina da categoria.
                        nome_arquivo_categoria = os.path.join(categoria_template_dir, f'index_{nome_categoria}.html')

                        categorias_encontradas = []
                        time_id = None

                        # Verifica se o arquivo existe; caso contr√°rio, cria a p√°gina
                        if not os.path.exists(nome_arquivo_categoria):
                            html_categoria_content = f"""
{{% extends "html/modelo_categoria.html" %}}
{{% load static %}}

{{% block title %}}{categoria.nome_categoria}{{% endblock title %}}
{{% block main_title %}}{categoria.nome}{{% endblock main_title %}}
{{% block id_time %}}{time_id}{{% endblock id_time %}}

<div class="categoria-listagem">
    <h2>√öltimas not√≠cias sobre {categoria.nome_categoria}</h2>
    <p>Aqui voc√™ encontrar√° todas as not√≠cias sobre {categoria.nome_categoria}.</p>
</div>
                            """
                        
                            # Salva o conte√∫do da p√°gina de categoria no arquivo.
                            with open(nome_arquivo_categoria, "w", encoding="utf-8") as file:
                                file.write(html_categoria_content)
                                
                            # Exibe mensagem de sucesso para cria√ß√£o da p√°gina de categoria.
                            print(Fore.GREEN + f"üìÇ P√°gina da categoria '{categoria.nome_categoria}' criada com sucesso em: {nome_arquivo_categoria}")
                        else:

                            # Notifica que a p√°gina j√° existe e n√£o ser√° recriada.
                            print(Fore.YELLOW + f"‚ö†Ô∏è A p√°gina da categoria '{categoria.nome_categoria}' j√° existe. N√£o ser√° criada novamente.")

                    except Exception as e:

                        # Exibe mensagem de erro ao criar a p√°gina da categoria.
                        print(Fore.RED + f"‚ùå Erro ao criar a p√°gina da categoria '{categoria.nome_categoria}': {e}")
            else:

                # Exibe mensagem ao n√£o encontrar categorias para a not√≠cia.
                print(Fore.RED + "‚ö†Ô∏è Nenhuma categoria encontrada! Atribuindo √† categoria 'Outros'.", '\n', '\n')





            ''' **SE√á√ÉO QUE CRIA A SEGUNDA BASE HTML DA NOT√çCIA** '''

            # Cria o conte√∫do HTML para a not√≠cia, referenciando o template principal.
            html_content = f"""
            
{{% extends "html/modelo.html" %}}
{{% load static %}}

{{% block title %}}{categoria.nome_categoria}{{% endblock title %}}
{{% block main_title %}}{categoria.nome_categoria}{{% endblock main_title %}}
{{% block second_title %}}{second_title_formatado}{{% endblock second_title %}}
{{% block main_content %}}{main_content_formatado}{{% endblock main_content %}}

"""

            # Incrementa o contador se o arquivo foi criado.
            if criado == 'sim':
                contador += 1

            # Encerra o loop ap√≥s processar X not√≠cias.
            if contador == 99:
                break
                                
             # Salva o conte√∫do renderizado no HTML.
            with open(caminho_arquivo, "w", encoding="utf-8") as file:
                file.write(html_content)

            # Retorna √† p√°gina principal e aguarda o carregamento.
            driver.get(url_principal)
            time.sleep(2)
    finally:

        # Encerra o navegador, independentemente de o resultado do processamento.
        driver.quit()

        # Exibe mensagem indicando que o navegador foi fechado.
        print(Fore.GREEN + "üõë Navegador encerrado. Coleta finalizada.")





def pegar_resumo(texto, limite_caracteres=100):
    '''
    Fun√ß√£o que retorna o resumo de um texto com base em um limite de caracteres.
    Se o texto for menor que o limite, retorna o texto inteiro.
    '''
    if not texto.strip():
        return "Texto vazio ou inv√°lido."
    
    # Limita o texto ao n√∫mero de caracteres especificado.
    resumo = texto[:limite_caracteres]
    
    # Garante que n√£o termine no meio de uma palavra.
    if len(texto) > limite_caracteres and not resumo.endswith((' ', '.', ',', '!', '?')):
        resumo = resumo.rsplit(' ', 1)[0]  # Remove a √∫ltima palavra incompleta.
    
    return resumo.strip()





def formatar_texto(arquivo_nome, imagens_elementos, novo_id_noticia):
    ''' 
    Fun√ß√£o que recebe o nome de um arquivo, elementos de imagem e um novo ID de not√≠cia.
    A fun√ß√£o processa o conte√∫do do arquivo, realiza a formata√ß√£o do texto removendo 
    tags HTML, emojis e outras informa√ß√µes irrelevantes, e o converte para HTML.
    '''

    # Define o nome do arquivo e o caminho para busc√°-lo.
    nome_arquivo = arquivo_nome
    file_path = os.path.join('trendfeeds', 'templates', 'html', 'noticias', f'{arquivo_nome}.html')
    
    # Verifica se o arquivo existe e captura seu conte√∫do, caso contr√°rio, inicializa com texto vazio.
    if __verificar_caminho(arquivo_nome, file_path): 
        text = __captar_tag(file_path)
    else:
        text = ""
    
    # Se o conte√∫do do arquivo n√£o estiver vazio, realiza a formata√ß√£o.
    if text:
        # Remove todas as tags HTML do texto.
        text = re.sub(r'<[^>]+>', '', text)
        print("‚úÖ Tags HTML removidas do texto!")

        # Remove frases que come√ßam com "+" seguido por texto at√© o final da linha.
        text = re.sub(r'\+ [^\n]+', '', text)
        
        # Define um padr√£o para capturar linhas que come√ßam e terminam com emojis.
        emoji_pattern = re.compile(
            r'.*[\U0001F600-\U0001F64F]'
            r'|.*[\U0001F300-\U0001F5FF]'
            r'|.*[\U0001F680-\U0001F6FF]'
            r'|.*[\U0001F700-\U0001F77F]'
            r'|.*[\U0001F780-\U0001F7FF]'
            r'|.*[\U0001F800-\U0001F8FF]'
            r'|.*[\U0001F900-\U0001F9FF]'
            r'|.*[\U0001FA00-\U0001FA6F]'
            r'|.*[\U0001FA70-\U0001FAFF]'
            r'|.*[\U00002700-\U000027BF]'
            r'|.*[\U0001F1E0-\U0001F1FF].*',
            flags=re.MULTILINE
        )
        
        # Substitui linhas que come√ßam e terminam com emojis por uma string vazia.
        text = emoji_pattern.sub('', text)
        
        text = re.sub(r'Assista:.*?\.', '', text)
        text = re.sub(r'^Assista:.*?sportv$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Assista.*?\.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Assista: tudo sobre.*?no ge.*?$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Assista: tudo sobre.*?sportv\.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Assista abaixo:.*?\.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^@.*?\.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Veja.*?tamb√©m$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Melhores momentos:*?.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Mais not√≠cias.*\.$', '', text, flags=re.MULTILINE)
        text = re.sub(r'^Mais.*?:$', '', text, flags=re.MULTILINE)

        print("‚úÖ Texto formatado com remo√ß√£o de emojis, 'Assista:' , 'Veja...tamb√©m'. e 'Mais Sobre:...")
    # Adiciona imagens ao texto formatado.
    text = __adicionar_imagens(text, imagens_elementos, novo_id_noticia)
    
    # Divide o texto em par√°grafos com base nos pontos finais.
    paragrafos = __dividir_por_pontos_finais(text, 3)
    
    # Converte os par√°grafos em HTML.
    text = __criar_html_com_paragrafos(paragrafos)
    print("‚úÖ Texto processado e convertido em HTML.")
    
    return text





def __verificar_caminho(arquivo_nome, file_path):
    ''' 
    Fun√ß√£o que verifica se um arquivo existe no caminho especificado.
    Recebe o nome do arquivo e o caminho completo, retornando True se o arquivo for encontrado 
    e uma string vazia caso contr√°rio. Tamb√©m exibe informa√ß√µes sobre o processo.
    '''
    
    # Exibe uma linha de separa√ß√£o e uma mensagem indicando que a verifica√ß√£o do arquivo est√° em andamento.
    print('-' * 10, 'üîç VERIFICANDO A EXIST√äNCIA DO ARQUIVO', '-' * 10, '\n')
    
    # Exibe o nome do arquivo que est√° sendo verificado.
    print(f"üìÑ Recebendo t√≠tulo: {arquivo_nome}")

    # Verifica se o arquivo existe no caminho especificado.
    if os.path.exists(file_path):

        # Se o arquivo for encontrado, exibe uma mensagem de sucesso.
        print(Fore.GREEN + f"‚úÖ Arquivo encontrado: {file_path}\n")
        print('-' * 30)

        # Retorna True, indicando que o arquivo foi encontrado.
        return True
    else:

        # Se o arquivo n√£o for encontrado, exibe uma mensagem de erro.
        print(Fore.RED + f"‚ùå Arquivo n√£o encontrado: {file_path}\n")
        print('-' * 30)

        # Retorna uma string vazia, indicando que o arquivo n√£o existe.
        return ""





def __captar_tag(file_path):
    ''' 
    Fun√ß√£o que abre um arquivo HTML, l√™ seu conte√∫do e captura o texto da primeira tag <p> encontrada.
    Retorna o texto dessa tag, ou uma mensagem caso a tag n√£o seja encontrada.
    '''
    
    # Inicializa uma string vazia para armazenar o conte√∫do da tag <p>.
    text = ""

    # Abre o arquivo HTML especificado no caminho fornecido, com a codifica√ß√£o UTF-8.
    with open(file_path, 'r', encoding='utf-8') as file:
        # L√™ o conte√∫do do arquivo.
        p_content = file.read()
        # Exibe uma mensagem indicando que o arquivo foi lido com sucesso.
        print(f"üìÇ Arquivo lido com sucesso: {file_path}")

    # Usa o BeautifulSoup para analisar o conte√∫do HTML do arquivo.
    soup = BeautifulSoup(p_content, 'lxml')

    # Busca a primeira tag <p> no conte√∫do HTML.
    p_tag = soup.find('p')

    # Verifica se a tag <p> foi encontrada no conte√∫do.
    if p_tag:

        # Se a tag <p> foi encontrada, armazena o texto dentro dela.
        text = p_tag.get_text()
    else:

        # Se a tag <p> n√£o for encontrada, exibe uma mensagem de alerta.
        print("‚ö†Ô∏è Nenhuma tag <p> encontrada no conte√∫do.")
    
    # Retorna o texto encontrado na tag <p>, ou uma string vazia caso n√£o tenha sido encontrada.
    return text





def __dividir_por_pontos_finais(texto, num_pontos_finais):
    ''' 
    Fun√ß√£o que divide um texto em par√°grafos, agrupando as senten√ßas com base no n√∫mero de pontos finais especificado.
    As tags de imagem s√£o tratadas separadamente para garantir que n√£o sejam divididas.
    '''
    
    # Encontra todas as tags <img> no texto usando express√£o regular.
    img_tags = re.findall(r'<img.*?>', texto)

    # Substitui temporariamente as tags <img> por marcadores √∫nicos para n√£o dividi-las.
    for i, tag in enumerate(img_tags):
        texto = texto.replace(tag, f"[[IMG_TAG_{i}]]")

    # Divide o texto em senten√ßas, usando o ponto final como delimitador.
    sentencas = texto.split('.')
    
    # Inicializa uma lista para armazenar os par√°grafos gerados.
    paragrafos = []

    # Agrupa as senten√ßas em par√°grafos, conforme o n√∫mero de senten√ßas definidas pelo argumento.
    for i in range(0, len(sentencas), num_pontos_finais):

        # Junta as senten√ßas atuais no par√°grafo e adiciona um ponto final no final do par√°grafo.
        paragrafo_atual = '. '.join(sentencas[i:i + num_pontos_finais]).strip() + '.'

        # Verifica se o par√°grafo n√£o est√° vazio ou n√£o cont√©m "Foto:", antes de adicion√°-lo √† lista de par√°grafos.
        if "Foto:" in paragrafo_atual or paragrafo_atual.strip():
            paragrafos.append(paragrafo_atual)

    # Restaura as tags <img> nos par√°grafos processados.
    for i, tag in enumerate(img_tags):
        paragrafos = [paragrafo.replace(f"[[IMG_TAG_{i}]]", tag) for paragrafo in paragrafos]

    # Exibe uma mensagem indicando quantos par√°grafos foram gerados.
    print(f"‚úÖ Texto dividido em {len(paragrafos)} par√°grafos.")
    
    # Retorna a lista de par√°grafos gerados.
    return paragrafos





def __criar_html_com_paragrafos(paragrafos):
    ''' 
    Fun√ß√£o que converte uma lista de par√°grafos em conte√∫do HTML.
    Cada par√°grafo √© envolvido em uma tag <p> com uma classe CSS.
    '''

    # Inicializa uma string vazia para armazenar o conte√∫do HTML gerado.
    html_content = ""

    # Itera sobre cada par√°grafo na lista de par√°grafos fornecida.
    for paragrafo in paragrafos:
        # Para cada par√°grafo, cria uma tag <p> com a classe 'noticia-conteudo' e insere o par√°grafo dentro dela.
        html_content += f"<p class='noticia-conteudo'>{paragrafo}</p>\n"

    # Marca o conte√∫do HTML como seguro para renderiza√ß√£o em Django.
    # Isso evita que as tags HTML sejam convertidas em texto normal (sem renderizar o HTML).
    html_content = mark_safe(html_content)

    # Retorna o conte√∫do HTML formatado, pronto para ser exibido em uma p√°gina web.
    return html_content





def __adicionar_imagens(text, image_names, noticia_id):
    ''' 
    Fun√ß√£o que adiciona imagens ao texto, vinculando as imagens √†s descri√ß√µes no conte√∫do.
    Para cada linha que cont√©m a palavra "Foto:", uma imagem ser√° inserida.
    O caminho da imagem √© baseado no ID da not√≠cia e no √≠ndice da imagem.

    text: O texto original onde as imagens ser√£o inseridas.
    image_names: Lista contendo os nomes das imagens a serem inseridas.
    noticia_id: O ID √∫nico da not√≠cia, usado para gerar o caminho das imagens.
    '''
    
    # Divide o texto em linhas, separando-o onde h√° quebras de linha (\n).
    # Isso ajuda a identificar partes espec√≠ficas do texto onde as imagens devem ser inseridas.
    lines = text.split('\n')

    # Inicializa uma lista vazia para armazenar o novo texto com as imagens inseridas.
    new_text = []

    # Inicializa o √≠ndice para rastrear qual imagem da lista image_names est√° sendo inserida.
    image_index = 0

    # Itera sobre cada linha do texto original.
    for line in lines:

        # Verifica se a linha cont√©m a palavra "Foto:" e se ainda h√° imagens dispon√≠veis para adicionar.
        if "Foto:" in line and image_index < len(image_names):

            # Cria a tag HTML para a imagem, incluindo uma classe CSS para estiliza√ß√£o.
            # Usa o ID da not√≠cia (noticia_id) e o √≠ndice da imagem (image_index) para gerar um caminho √∫nico.
            img_tag = f'<div class="div-imagem"><img class="noticia-imagem" src="{{% get_media_prefix %}}noticias/n_{noticia_id}_{image_index}.jpg"></div>'

            # Cria uma nova linha combinando a tag de imagem com a descri√ß√£o original da linha.
            new_line = f"{img_tag}<p class='foto-descricao'>{line}</p>"

            # Adiciona a nova linha (imagem + descri√ß√£o) √† lista de novas linhas.
            new_text.append(new_line)

            # Incrementa o √≠ndice para passar para a pr√≥xima imagem.
            image_index += 1

        # Se a linha n√£o contiver "Foto:" ou n√£o houver mais imagens, adiciona a linha original ao texto final.
        else:
            new_text.append(line)

    # Combina todas as linhas modificadas (com as imagens inseridas) em uma √∫nica string.
    # As linhas s√£o separadas por quebras de linha (\n).
    final_text = '\n'.join(new_text)

    # Exibe no console o n√∫mero de imagens que foram adicionadas ao texto.
    print(f"‚úÖ {image_index} imagens adicionadas ao texto.")

    # Retorna o texto final com as tags de imagem j√° inseridas.
    return final_text





def iniciar_scheduler():
    ''' 
    Fun√ß√£o respons√°vel por iniciar o agendador de tarefas.
    Atualmente, serve como um marcador de posi√ß√£o (placeholder) que pode ser expandido no futuro para incluir a l√≥gica de agendamento real.
    '''
    
    # Exibe uma mensagem no console indicando que o agendador foi iniciado.
    print("‚è∞ Scheduler iniciado.")

    # A fun√ß√£o atualmente n√£o faz nada, mas pode ser expandida no futuro com agendamentos de tarefas.
    pass